package controller

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/Edwinfpirajan/Distrifabrica.git/common"
	"github.com/Edwinfpirajan/Distrifabrica.git/entity"
	"github.com/Edwinfpirajan/Distrifabrica.git/models"
	"github.com/labstack/echo/v4"
)

/*func SaveRegisterttendance(c echo.Context) error {
	db := common.GetConnection()
	body, err := ioutil.ReadAll(c.Request().Body)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	var attendance entity.Attendance
	err = json.Unmarshal(body, &attendance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	var employe models.Employe
	if err := db.Where("pin_employe = ?", attendance.PinEmployeFK).First(&employe).Error; err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Employee not found")
	}

	var validateAttendance models.Attendances
	if err := db.Model(&validateAttendance).Where("pin_employe_fk = ? AND DATE(created_at) = CURDATE()", attendance.PinEmployeFK).Find(&validateAttendance).Error; err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Register not found")
	}

	if validateAttendance.ID == 0 {
		modelsAttendance := models.Attendances{
			PinEmployeFK: attendance.PinEmployeFK,
			Photo:        attendance.Photo,
		}

		err = db.Save(&modelsAttendance).Error
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err.Error())
		}

		return c.JSON(http.StatusOK, map[string]string{
			"message": "Registro creado exitosamente",
		})
	}

	timeNow := time.Now()

	switch attendance.State {

	case "breakIn":
		validateAttendance.BreakIn = &timeNow
		break
	case "breakOut":
		validateAttendance.BreakOut = &timeNow
		break
	case "departure":
		validateAttendance.Departure = &timeNow
		break
	}

	err = db.Save(&validateAttendance).Error
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	return c.JSON(http.StatusOK, map[string]string{
		"message": "Registro actualizado exitosamente",
	})
}*/

func validateAttendance(pinEmploye string, state string) error {
	db := common.GetConnection()
	var validateAttendance models.Attendances
	if err := db.Model(&validateAttendance).Where("pin_employe_fk = ? AND DATE(created_at) = CURDATE()", pinEmploye).Find(&validateAttendance).Error; err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Register")
	}

	if validateAttendance.ID == 0 && state != "arrival" {
		return echo.NewHTTPError(http.StatusBadRequest, "Debe registrar el estado 'arrival' primero")
	}

	if state == "arrival" && validateAttendance.Arrival != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'arrival'")
	}

	if state == "breakIn" && validateAttendance.BreakIn != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'breakIn'")
	}

	if state == "breakOut" && validateAttendance.BreakOut != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'breakOut'")
	}

	if state == "departure" && validateAttendance.Departure != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'departure'")
	}
	return nil
}

func SaveRegisterAttendance(c echo.Context) error {
	db := common.GetConnection()
	body, err := ioutil.ReadAll(c.Request().Body)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	var attendance entity.Attendance
	err = json.Unmarshal(body, &attendance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	var employe models.Employe
	if err := db.Where("pin_employe = ?", attendance.PinEmployeFK).First(&employe).Error; err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Employee not found")
	}

	var validateAttendance models.Attendances
	if err := db.Model(&validateAttendance).Where("pin_employe_fk = ? AND DATE(created_at) = CURDATE()", attendance.PinEmployeFK).Find(&validateAttendance).Error; err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Register not found")
	}

	// Validar si ya se ha registrado el estado "arrival"
	if validateAttendance.ID == 0 && attendance.State != "arrival" {
		return echo.NewHTTPError(http.StatusBadRequest, "Debe registrar el estado 'arrival' primero")
	}

	// Validar que no se registre el mismo estado varias veces
	if attendance.State == "arrival" && validateAttendance.Arrival != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'arrival'")
	}

	if attendance.State == "breakIn" && validateAttendance.BreakIn != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'breakIn'")
	}

	if attendance.State == "breakOut" && validateAttendance.BreakOut != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'breakOut'")
	}

	if attendance.State == "departure" && validateAttendance.Departure != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ya se ha registrado el estado 'departure'")
	}

	if validateAttendance.ID == 0 {
		modelsAttendance := models.Attendances{
			PinEmployeFK: attendance.PinEmployeFK,
			Photo:        attendance.Photo,
		}

		err = db.Save(&modelsAttendance).Error
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err.Error())
		}
		return c.JSON(http.StatusOK, map[string]string{
			"message": "Registro creado exitosamente",
		})
	}

	timeNow := time.Now()

	switch attendance.State {
	case "arrival":
		validateAttendance.Arrival = &timeNow
		break
	case "breakIn":
		validateAttendance.BreakIn = &timeNow
		break
	case "breakOut":
		validateAttendance.BreakOut = &timeNow
		break
	case "departure":
		validateAttendance.Departure = &timeNow
		break
	}

	err = db.Save(&validateAttendance).Error
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	return c.JSON(http.StatusOK, map[string]string{
		"message": "Registro actualizado exitosamente",
	})
}

func GetAllAttendance(c echo.Context) error {
	db := common.GetConnection()
	attendance := []models.GetAllAttendances{}

	db.Table("attendances").Select("*").Joins("INNER JOIN employes e on e.pin_employe = attendances.pin_employe_fk").Find(&attendance)

	return c.JSON(http.StatusOK, attendance)
}

//VALIDATIONS

func ValidateHorary(c echo.Context) error {
	db := common.GetConnection()

	body, err := ioutil.ReadAll(c.Request().Body)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	var validateHorary entity.ValidateHorary
	err = json.Unmarshal(body, &validateHorary)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	var arrival time.Time

	// db.Table("attendances").Where("pin_employe_fk = ? and arrival = ?", validateHorary.PinEmployeFK, validateHorary.Date).Scan(&attendances)
	db.Raw("select arrival from attendances a where pin_employe_fk = ? and date_format(arrival, '%d-%m-%Y') = date_format(?, '%d-%m-%Y')",
		validateHorary.PinEmployeFK, validateHorary.Date).Scan(&arrival)

	return c.JSON(http.StatusOK, arrival)

}

func ValidateEmploye(c echo.Context) error {
	id := c.Param("pin")
	db := common.GetConnection()

	var employe models.Employe
	if err := db.Where("pin_employe = ?", id).First(&employe).Error; err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Employee not found")
	}

	return c.JSON(http.StatusOK, employe)

}
